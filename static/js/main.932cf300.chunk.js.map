{"version":3,"sources":["WeatherInfo.js","App.js","index.js"],"names":["WeatherInfo","d","Date","date","toString","split","splice","join","time","toLocaleString","hour","minute","hour12","day","getDay","window","navigator","geolocation","getCurrentPosition","console","log","loc","location","useState","weather","setWeather","temp","setTemp","geo","setlocation","getWeather","replace","fetch","then","res","json","data","main","catch","err","useEffect","icon","className","type","placeholder","onChange","event","value","target","onClick","src","alt","Math","round","description","humidity","temp_max","temp_min","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LA+HeA,MAzHf,WAGI,IAAMC,EAAI,IAAIC,KAGVC,GAAQ,IAAID,MAAQE,WAAWC,MAAM,KAAKC,OAAO,EAAE,GAAGC,KAAK,KAE3DC,EAAMP,EAAEQ,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,IAC9EC,EAJK,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAIxDZ,EAAEa,UAEhBC,OAAOC,UAAUC,YAAYC,mBAAmBC,QAAQC,IAAKD,QAAQC,KAErE,IAYIC,EAZAC,EAAS,YAEb,EAAyBC,mBAAS,IAAlC,mBAAKC,EAAL,KAAaC,EAAb,KACA,EAAmBF,mBAAS,IAA5B,mBAAKG,EAAL,KAAUC,EAAV,KACA,EAAsBJ,mBAAS,CAAC,cAAhC,mBAAKK,EAAL,KAASC,EAAT,KAaA,SAASC,IAELD,EAAYP,GAKZD,EAAIC,EAASS,QAAQ,OAAQ,KAC7BZ,QAAQC,IAAIC,GACZW,MAAM,sDAAD,OAAuDX,EAAvD,+DACJY,MAAK,SAACC,GACH,OAAOA,EAAIC,UAEdF,MAAK,SAACG,GACHjB,QAAQC,IAAIgB,GAEZX,EAAWW,EAAKZ,QAAQ,IAGxBG,EAAQS,EAAKC,SAGhBC,OAAM,SAACC,GACJpB,QAAQC,IAAImB,MAEhBpB,QAAQC,IAAII,GA7BhBgB,qBAAU,WACNV,MACF,IA8BFX,QAAQC,IAAII,GACZL,QAAQC,IAAIM,GAEZ,IAAIe,EAAK,qCAAqCjB,EAAQiB,KAAK,UAG3D,OACI,sBAAKC,UAAU,OAAf,UAEI,sBAAMA,UAAU,UAAhB,UACI,uBAAOC,KAAK,OAAQD,UAAU,YAAYE,YAAY,WAAWC,SAAW,SAACC,GAhDzF,IAAmBC,IAgDyFD,EAAME,OAAOD,MA9CrHzB,EAASyB,EACV5B,QAAQC,IAAI2B,MA8CH,wBAAQL,UAAU,eAAeO,QAASnB,EAA1C,uBAEJ,mBAAGY,UAAU,SAGb,sBAAMA,UAAU,OAAhB,UACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,WAAf,UACI,mBAAGA,UAAU,OAAb,SACCd,IAED,oBAAGc,UAAU,OAAb,UACKlC,EADL,IACYK,EADZ,IACkBV,QAGtB,qBAAK+C,IAAKT,EAAMU,IAAI,GAAGT,UAAU,mBAErC,sBAAKA,UAAU,QAAf,UAQI,sBAAKA,UAAU,cAAf,UACI,oBAAGA,UAAU,OAAb,UAAqBU,KAAKC,MAAM3B,EAAKA,MAArC,WADJ,IACsD,mBAAGgB,UAAU,OAAb,sBAEtD,mBAAGA,UAAU,YAAb,SACKlB,EAAQ8B,cAGjB,sBAAKZ,UAAU,OAAf,UACI,sBAAKA,UAAU,WAAf,UACI,oBAAGA,UAAU,MAAb,UAAoBhB,EAAK6B,SAAzB,OACA,mBAAGb,UAAU,OAAb,yBAEJ,sBAAKA,UAAU,UAAf,UACI,oBAAGA,UAAU,OAAb,UAAqBhB,EAAK8B,SAA1B,WACA,mBAAGd,UAAU,QAAb,oBAEJ,sBAAKA,UAAU,UAAf,UACG,oBAAGA,UAAU,OAAb,cAAsBhB,EAAK+B,SAA3B,WACA,mBAAGf,UAAU,OAAb,iCClGRgB,MAff,WAEE,OACE,sBAAKhB,UAAU,MAAf,UAEE,yBAAQA,UAAU,aAAlB,UACE,qBAAKQ,IAAI,wDAAwDC,IAAI,OAAOT,UAAU,UACtF,mBAAGA,UAAU,QAAb,8BAGF,cAAC,EAAD,QCTNiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.932cf300.chunk.js","sourcesContent":["\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nfunction WeatherInfo(){\r\n    \r\n    \r\n    const d = new Date();\r\n    // let dayN = d.getDay();\r\n    let days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\r\n    var date = (new Date()).toString().split(' ').splice(1,2).join(' ');\r\n    // let time=d.getHours()+\":\"+d.getMinutes();\r\n    let time= d.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n    let day= days[d.getDay()];\r\n   \r\n    window.navigator.geolocation.getCurrentPosition(console.log, console.log);\r\n    \r\n    let location=\"Kathmandu\";\r\n\r\n    let [weather,setWeather]=useState([]);\r\n    let [temp,setTemp]=useState([]);\r\n    let [geo,setlocation]=useState([\"kathmandu\"]);\r\n   \r\n    \r\n    function readValue(value)\r\n    {\r\n        location=value;\r\n       console.log(value);  \r\n    }\r\n    let loc;\r\n    useEffect(()=>{\r\n        getWeather();\r\n    },[])\r\n\r\n    function getWeather(){\r\n\r\n        setlocation(location);\r\n\r\n        //replace space with +\r\n\r\n\r\n        loc=location.replace(/\\s+/g, '+');\r\n        console.log(loc);\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather/?q=${loc}&units=metric&cnt=4&appid=aea7fbafa0aa1dbedbd0e07af86c83ce`)\r\n        .then((res)=>{\r\n            return res.json()\r\n        })\r\n        .then((data)=>{\r\n            console.log(data);\r\n            \r\n            setWeather(data.weather[0]);\r\n            // console.log(weather);\r\n            \r\n            setTemp(data.main);\r\n            // console.log(temp);\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n        console.log(weather);\r\n    }\r\n\r\n    console.log(weather);\r\n    console.log(temp);\r\n\r\n    let icon=\"https://openweathermap.org/img/wn/\"+weather.icon+\"@4x.png\";\r\n\r\n\r\n    return(\r\n        <div className=\"main\">\r\n           \r\n            <div  className=\"content\">\r\n                <input type=\"text\"  className=\"searchbar\" placeholder=\"Location\" onChange={ (event)=>{readValue(event.target.value)}}/>\r\n                <button className=\"searchbutton\" onClick={getWeather}>Search</button>\r\n            </div>\r\n            <p className=\"head\">\r\n                    {/* Current Weather */}\r\n            </p>\r\n            <div  className=\"info\">\r\n                <div className=\"iconcity\">\r\n                    <div className=\"cityTime\">\r\n                        <p className=\"city\">\r\n                        {geo}\r\n                        </p>\r\n                        <p className=\"time\">\r\n                            {time},{day},{date}\r\n                        </p>\r\n                    </div>\r\n                    <img src={icon} alt=\"\" className=\"weathericon\" />\r\n                </div>\r\n                <div className=\"basic\">\r\n                    {/* <p className=\"day\">\r\n                    \r\n                    </p>\r\n                    <p className=\"date\">\r\n                        \r\n                    </p> */}\r\n                    \r\n                    <div className=\"temperature\">\r\n                        <p className=\"temp\">{Math.round(temp.temp)}­ </p> <p className=\"cel1\">°C</p> \r\n                    </div>\r\n                    <p className=\"condition\">\r\n                        {weather.description}\r\n                        \r\n                    </p>\r\n                <div className=\"desc\">\r\n                    <div className=\"humidity\">\r\n                        <p className=\"hum\">{temp.humidity}%</p>\r\n                        <p className=\"humt\">Humidity</p>\r\n                    </div>\r\n                    <div className=\"maxtemp\">\r\n                        <p className=\"temM\">{temp.temp_max}°C</p>\r\n                        <p className=\"tempt\">Max</p>\r\n                    </div>\r\n                    <div className=\"mintemp\">\r\n                       <p className=\"minN\"> {temp.temp_min}°C</p>\r\n                       <p className=\"mint\">Min</p>\r\n                    </div>\r\n                    </div>\r\n                </div>           \r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default WeatherInfo;","import './App.css';\n\nimport WeatherInfo from './WeatherInfo';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        <img src=\"https://cdn-icons-png.flaticon.com/512/831/831268.png\" alt=\"logo\" className=\"logop\" />\n        <p className=\"logon\">My WeatherApp</p>\n      </header>\n      \n      <WeatherInfo/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}